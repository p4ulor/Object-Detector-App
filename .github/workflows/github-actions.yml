# References
# https://docs.github.com/en/actions/writing-workflows/quickstart
# https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-gradle
# https://github.com/gradle/actions
# https://cli.github.com/manual/gh_release_upload
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions#status-check-functions
# https://docs.github.com/en/webhooks/webhook-events-and-payloads#status
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
# https://github.com/orgs/community/discussions/25234
# https://docs.github.com/pt/actions/security-for-github-actions/security-guides/automatic-token-authentication
# https://docs.github.com/pt/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context

# Workflow name
name: Object Detector GitHub Actions

# Workflow title
run-name: ${{ github.actor }} is cooking up some GitHub Actions
on:
  push:
    branches:
      - main
  release:
    types: [ published ] # this workflow runs when a new release is published

# Make sure the GITHUB_TOKEN has permission to upload to our releases
permissions:
  contents: write

jobs:
  # Only 1 job, so only 1 file system is used. If the action is a release, other steps are performed
  build-and-run:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      RELEASE_JKS_FILE_BASE64: ${{ secrets.RELEASE_JKS_FILE_BASE64 }}
      RELEASE_JSK_PASSWORD: ${{ secrets.RELEASE_JSK_PASSWORD }}
      RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
      RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
    steps:
      - run: echo "The job was triggered by ${{ github.event_name }} event. Branch ${{ github.ref }}"

      # Clone repo
      - name: Check out repo code
        uses: actions/checkout@v4

      - run: echo "The ${{ github.repository }} repo has been cloned to the runner."

      - name: List files in the repo
        run: |
          ls ${{ github.workspace }}

      # Setup java https://github.com/actions/setup-java
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Set up gradle https://github.com/gradle/actions
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.7'

      # Grants execute permission to gradle
      - name: Grant Permissions to gradlew
        run: chmod +x gradlew

      # build without running tests so it's faster
      - name: Build app
        id: build_app
        run: ./gradlew build -x test

      - run: echo "Job's status is ${{ job.status }}. GH event = ${{ github.event.name }}"

      # Release logic
      # Build apk
      - name: Release app
        if: github.event_name == 'release' && github.event.action == 'published'
        run: ./gradlew assembleRelease

      - name: Find APK file
        if: github.event_name == 'release' && github.event.action == 'published'
        id: find_apk
        run: |
          # Locate the generated APK
          APK_PATH=$(find . -name "*.apk" -path "*app/build/outputs/apk/release/*" -print -quit)
          if [ -z "$APK_PATH" ]; then
            echo "Error: No APK file found"
            exit 1
          fi
          echo "Found APK at: $APK_PATH"
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT # Set an output variable
          echo "apk_name=$(basename $APK_PATH)" >> $GITHUB_OUTPUT

      - name: Upload APK to Release
        id: upload_apk
        if: github.event_name == 'release' && github.event.action == 'published' && steps.find_apk.outputs.apk_path != '' # Only upload if an APK was found
        run: |
          echo "Uploading ${{ steps.find_apk.outputs.apk_path }} to release ${{ github.event.release.tag_name }}"
          gh release upload \
            '${{ github.event.release.tag_name }}' \
            '${{ steps.find_apk.outputs.apk_path }}'

      # Post build and/or release logic (the script will clear everything due to checkout and only contain .gitignored files)

      - name: Make script executable
        run: chmod +x ./.github/workflows/deploy-gh-pages.sh

      - name: Deploy to GH pages
        if: github.event_name == 'release' && github.event.action == 'published' && steps.upload_apk.conclusion == 'success'
        run: |
          ./gradlew app:dokkaHtml
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git switch --orphan gh-pages
          mv ./docs/dokka-generated/* .
          echo "Moved /docs/dokka-generated/* to root"
          git add ./images/*
          git add ./-object--detector--app/*
          git add ./scripts/*
          git add ./styles/*
          git add ./index.html
          git add ./navigation.html
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Deploy to gh-pages"
          git remote set-url origin https://p4ulor:${{ github.token }}@github.com/${{ github.repository }}
          git push origin gh-pages --force
